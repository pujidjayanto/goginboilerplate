// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// DatabaseHandler is an autogenerated mock type for the DatabaseHandler type
type DatabaseHandler struct {
	mock.Mock
}

type DatabaseHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseHandler) EXPECT() *DatabaseHandler_Expecter {
	return &DatabaseHandler_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *DatabaseHandler) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DatabaseHandler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DatabaseHandler_Expecter) Close() *DatabaseHandler_Close_Call {
	return &DatabaseHandler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DatabaseHandler_Close_Call) Run(run func()) *DatabaseHandler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseHandler_Close_Call) Return(_a0 error) *DatabaseHandler_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseHandler_Close_Call) RunAndReturn(run func() error) *DatabaseHandler_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: ctx
func (_m *DatabaseHandler) GetDB(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// DatabaseHandler_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type DatabaseHandler_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseHandler_Expecter) GetDB(ctx interface{}) *DatabaseHandler_GetDB_Call {
	return &DatabaseHandler_GetDB_Call{Call: _e.mock.On("GetDB", ctx)}
}

func (_c *DatabaseHandler_GetDB_Call) Run(run func(ctx context.Context)) *DatabaseHandler_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseHandler_GetDB_Call) Return(_a0 *gorm.DB) *DatabaseHandler_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseHandler_GetDB_Call) RunAndReturn(run func(context.Context) *gorm.DB) *DatabaseHandler_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *DatabaseHandler) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseHandler_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type DatabaseHandler_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseHandler_Expecter) Ping(ctx interface{}) *DatabaseHandler_Ping_Call {
	return &DatabaseHandler_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *DatabaseHandler_Ping_Call) Run(run func(ctx context.Context)) *DatabaseHandler_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseHandler_Ping_Call) Return(_a0 error) *DatabaseHandler_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseHandler_Ping_Call) RunAndReturn(run func(context.Context) error) *DatabaseHandler_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// RunTransaction provides a mock function with given fields: ctx, fc
func (_m *DatabaseHandler) RunTransaction(ctx context.Context, fc func(context.Context) error) error {
	ret := _m.Called(ctx, fc)

	if len(ret) == 0 {
		panic("no return value specified for RunTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseHandler_RunTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTransaction'
type DatabaseHandler_RunTransaction_Call struct {
	*mock.Call
}

// RunTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fc func(context.Context) error
func (_e *DatabaseHandler_Expecter) RunTransaction(ctx interface{}, fc interface{}) *DatabaseHandler_RunTransaction_Call {
	return &DatabaseHandler_RunTransaction_Call{Call: _e.mock.On("RunTransaction", ctx, fc)}
}

func (_c *DatabaseHandler_RunTransaction_Call) Run(run func(ctx context.Context, fc func(context.Context) error)) *DatabaseHandler_RunTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *DatabaseHandler_RunTransaction_Call) Return(_a0 error) *DatabaseHandler_RunTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseHandler_RunTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *DatabaseHandler_RunTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseHandler creates a new instance of DatabaseHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseHandler {
	mock := &DatabaseHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
