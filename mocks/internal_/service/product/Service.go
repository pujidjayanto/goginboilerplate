// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/pujidjayanto/goginboilerplate/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: _a0
func (_m *Service) GetAll(_a0 context.Context) (*dto.GetAllProductResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *dto.GetAllProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dto.GetAllProductResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dto.GetAllProductResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetAllProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Service_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Service_Expecter) GetAll(_a0 interface{}) *Service_GetAll_Call {
	return &Service_GetAll_Call{Call: _e.mock.On("GetAll", _a0)}
}

func (_c *Service_GetAll_Call) Run(run func(_a0 context.Context)) *Service_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_GetAll_Call) Return(_a0 *dto.GetAllProductResponse, _a1 error) *Service_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAll_Call) RunAndReturn(run func(context.Context) (*dto.GetAllProductResponse, error)) *Service_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPaginated provides a mock function with given fields: _a0, _a1
func (_m *Service) GetAllPaginated(_a0 context.Context, _a1 dto.GetAllProductRequest) (*dto.GetAllProductPaginatedResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPaginated")
	}

	var r0 *dto.GetAllProductPaginatedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetAllProductRequest) (*dto.GetAllProductPaginatedResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetAllProductRequest) *dto.GetAllProductPaginatedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetAllProductPaginatedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetAllProductRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAllPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPaginated'
type Service_GetAllPaginated_Call struct {
	*mock.Call
}

// GetAllPaginated is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 dto.GetAllProductRequest
func (_e *Service_Expecter) GetAllPaginated(_a0 interface{}, _a1 interface{}) *Service_GetAllPaginated_Call {
	return &Service_GetAllPaginated_Call{Call: _e.mock.On("GetAllPaginated", _a0, _a1)}
}

func (_c *Service_GetAllPaginated_Call) Run(run func(_a0 context.Context, _a1 dto.GetAllProductRequest)) *Service_GetAllPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.GetAllProductRequest))
	})
	return _c
}

func (_c *Service_GetAllPaginated_Call) Return(_a0 *dto.GetAllProductPaginatedResponse, _a1 error) *Service_GetAllPaginated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAllPaginated_Call) RunAndReturn(run func(context.Context, dto.GetAllProductRequest) (*dto.GetAllProductPaginatedResponse, error)) *Service_GetAllPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
